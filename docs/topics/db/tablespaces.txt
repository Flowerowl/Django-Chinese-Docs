===========
表空间(Tablespaces)
===========

使用tablespaces来组织磁盘布局是一种普遍的优化数据库系统性能的方式。

.. _`tablespaces`: http://en.wikipedia.org/wiki/Tablespace

.. 提示::
    Django 没有为你创建tablespaces. 请参照你的数据库引擎文档来创建以及管理tablespaces.  

为表声明tablespaces
--------------------------------

table的tablespace可以根据model的``class Meta``的:attr:`~django.db.models.Options.db_tablespace`属性来指定生成。

这个选项也会自动的对model里的:class:`~django.db.models.ManyToManyField`创建并生效。

你可以使用:setting:`DEFAULT_TABLESPACE`来为:attr:`~django.db.models.Options.db_tablespace`指定一个默认值.

这设置tablespace对于django内置的app以及其他你不可变动的程序来说非常有用。

为表索引声明tablespaces
---------------------------------

你可以在``Field``构造函数里传入:attr:`~django.db.models.Field.db_tablespaces`来为index指定一个其他的tablespace.

如果column没有index的话,tablespace的设置将被忽略。

你可以使用:setting:`DEFAULT_INDEX_TABLESPACE`来为:attr:`~django.db.models.Field.db_tablespace`指定一个默认值.

如果:attr:`~django.db.models.Field.db_tablespace`没有被指定并且你没有设置:setting:`DEFAULT_INDEX_TABLESPACE`,那么index将会和tables一同创建在同一个tablespace.

示例
----------

.. code-block:: python

    class TablespaceExample(models.Model):
        name = models.CharField(max_length=30, db_index=True, db_tablespace="indexes")
        data = models.CharField(max_length=255, db_index=True)
        edges = models.ManyToManyField(to="self", db_tablespace="indexes")

        class Meta:
            db_tablespace = "tables"

在这个例子中,使用``TablespaceExample``model来创建的表(model table以及many-to-many字段对应的table)将会存储在``tables``的tablespace。

name字段以及many-to-many表上的index都会被存储在``indexes``tablespace。

``data``字段也产生index,但是它没有指明tablespace,所以将会使用model默认的tablespace``tables``.

数据库支持
----------------

PostgreSQL 以及 Oracle 支持tablespace. SQLite, MySQL 不支持.

当你使用的数据库缺少对tablespaces的支持时,django会自动的忽略掉有关tablespace的设置。

.. versionchanged:: 1.4
    Since Django 1.4, the PostgreSQL backend supports tablespaces.
