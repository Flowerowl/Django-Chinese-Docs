===========
表空间(Tablespaces)
===========

使用tablespaces来组织磁盘布局是一种普遍的优化数据库系统性能的方式。

.. _`tablespaces`: http://en.wikipedia.org/wiki/Tablespace

.. 提示::
    Django 没有为你创建tablespaces. 请参照你的数据库引擎文档来创建以及管理tablespaces.  

为表声明tablespaces
--------------------------------

table的tablespace可以根据model的``class Meta``的:attr:`~django.db.models.Options.db_tablespace`属性来指定生成。这个选项也会自动的对model里的:class:`~django.db.models.ManyToManyField`创建并生效。

你可以使用:setting:`DEFAULT_TABLESPACE`来为:attr:`~django.db.models.Options.db_tablespace`指定一个默认值.这设置tablespace对于django内置的app以及其他你不可变动的程序来说非常有用。

为表索引声明tablespaces
---------------------------------

You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a
``Field`` constructor to specify an alternate tablespace for the ``Field``'s
column index. If no index would be created for the column, the option is
ignored.

You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify
a default value for :attr:`~django.db.models.Field.db_tablespace`.

If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you didn't
set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the same
tablespace as the tables.

An example
----------

.. code-block:: python

    class TablespaceExample(models.Model):
        name = models.CharField(max_length=30, db_index=True, db_tablespace="indexes")
        data = models.CharField(max_length=255, db_index=True)
        edges = models.ManyToManyField(to="self", db_tablespace="indexes")

        class Meta:
            db_tablespace = "tables"

In this example, the tables generated by the ``TablespaceExample`` model (i.e.
the model table and the many-to-many table) would be stored in the ``tables``
tablespace. The index for the name field and the indexes on the many-to-many
table would be stored in the ``indexes`` tablespace. The ``data`` field would
also generate an index, but no tablespace for it is specified, so it would be
stored in the model tablespace ``tables`` by default.

Database support
----------------

PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't.

When you use a backend that lacks support for tablespaces, Django ignores all
tablespace-related options.

.. versionchanged:: 1.4
    Since Django 1.4, the PostgreSQL backend supports tablespaces.
